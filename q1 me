#include <stdio.h>
#include <stdbool.h>
#define NUM_RESOURCES 4
#define NUM_PROCESSES 5
int available[NUM_RESOURCES] = {1, 5, 2, 0};
int allocation[NUM_PROCESSES][NUM_RESOURCES] = {
{0, 0, 1, 2},
{1, 0, 0, 0},
{1, 3, 5, 4},
{0, 6, 3, 2},
{0, 0, 1, 4}
};
int max[NUM_PROCESSES][NUM_RESOURCES] = {
{0, 0, 1, 2},
{1, 7, 5, 0},
{2, 3, 5, 6},
{0, 6, 5, 2},
{0, 6, 5, 6}
};
bool isSafeState() {
bool finish[NUM_PROCESSES] = {false};
int work[NUM_RESOURCES];
int safeSequence[NUM_PROCESSES];
int count = 0;
for (int i = 0; i < NUM_RESOURCES; i++) {
work[i] = available[i];
}
while (count < NUM_PROCESSES) {
bool found = false;
for (int i = 0; i < NUM_PROCESSES; i++) {
if (!finish[i]) {
int j;
for (j = 0; j < NUM_RESOURCES; j++) {
if (max[i][j] - allocation[i][j] > work[j]) {
break;
}
}
if (j == NUM_RESOURCES) {
for (int k = 0; k < NUM_RESOURCES; k++) {
work[k] += allocation[i][k];
}
finish[i] = true;
safeSequence[count++] = i;
found = true;
}
}
}
if (!found) {
printf("System is not in a safe state.\n");
return false;
}
}
printf("System is in a safe state.\nSafe sequence: ");
for (int i = 0; i < NUM_PROCESSES; i++) {
printf("P%d ", safeSequence[i]);
}
printf("\n");
return true;
}
int main() {
isSafeState();
return 0;
}
